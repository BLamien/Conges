package fr.univlr.cri.conges;
// Generated by the WOLips TemplateEngine Plug-in at 12 f�vr. 2005 17:18:20

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOClassDescription;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSTimestamp;

import fr.univlr.cri.conges.YCRIWebPage;
import fr.univlr.cri.conges.eos.modele.conges.EOCET;
import fr.univlr.cri.conges.eos.modele.conges.EOCETTransaction;
import fr.univlr.cri.conges.eos.modele.conges.EOStructureAutorisee;
import fr.univlr.cri.conges.eos.modele.grhum.EOStructure;
import fr.univlr.cri.conges.eos.modele.planning.EOAffectationAnnuelle;
import fr.univlr.cri.conges.eos.modele.planning.EOMouvement;
import fr.univlr.cri.conges.print.CngPdfBoxCtrl;
import fr.univlr.cri.conges.print.ConstsPrint;
import fr.univlr.cri.conges.print.PrintListeCET;
import fr.univlr.cri.conges.print.PrintListeTransactionCET;
import fr.univlr.cri.conges.print.PrintSituationCET;
import fr.univlr.cri.conges.utils.DateCtrlConges;
import fr.univlr.cri.conges.utils.TimeCtrl;
import fr.univlr.cri.util.StringCtrl;
import fr.univlr.cri.ycrifwk.utils.UtilDb;

/**
 * Panneau d'administration du CET
 * 
 * @author Cyril Tarade <cyril.tarade at univ-lr.fr>
 */

public class PageAdminCETOld extends YCRIWebPage {

	public EOStructure unService, leServiceSelectionne;
	public NSArray lesTransactions;
	public EOCETTransaction uneTransactionItem, uneTransactionSelectionnee;
	public String valeur;
	public NSTimestamp dateArret = DateCtrlConges.now();
	public EOAffectationAnnuelle selectedAffAnn;
  
  // l'annee universitaire selectionnee dans la
  // liste des services / affectations
  public String selectedAnneeUniv;
  
  // 
  public String heuresBasculees;
  
  // gestion de la bascule des reliquats a partir d'une reservation de type mouvement
  
  public final String CET_DECISION_BASCULE_IDENTIQUE 	= "IDENT";
  public final String CET_DECISION_BASCULE_DIFFERENTE	= "DIFF";
  public final String CET_DECISION_BASCULE_REFUSEE 		=	"REFUS";

  public String cetDecisionBascule;
  
  public PageAdminCETOld(WOContext context) {
    super(context);
    // selection par defaut de l'annee universitaire en cours
    selectedAnneeUniv = DateCtrlConges.anneeUnivForDate(laSession.dateRef());
  }

  public boolean isAffAnnSelected() {
    return selectedAffAnn != null;
  }
  
  /** @TypeInfo fr.univlr.cri.apps.conges.EOCETTransaction */
  public NSArray lesTransactions() {
    lesTransactions = EOCETTransaction.findAllTransactionForIndividuInContext(edc, selectedAffAnn.individu(), true);
    return lesTransactions;
  }

  public void setLesTransactions(NSArray newLesTransactions) {
    lesTransactions = newLesTransactions;
  }

  public EOCETTransaction uneTransactionItem() {
    return uneTransactionItem;
  }

  public void setUneTransactionItem(EOCETTransaction newUneTransactionItem) {
    uneTransactionItem = newUneTransactionItem;
  }

  /**
   * Interception du changement de planning, on annule les opérations
   * en cours
   * @param value
   */
  public void setSelectedAffAnn(EOAffectationAnnuelle value) {
  	annuler();
  	selectedAffAnn = value;
  }
  
  /**
   * Demander l'inspection de la transaction CET en cours
   * @return
   */
  public WOComponent detaillerTransaction() {
    uneTransactionSelectionnee = uneTransactionItem;
    int val = uneTransactionSelectionnee.valeur().intValue();
    if (!uneTransactionSelectionnee.isTransactionAutomatique()) {
      setValeur(TimeCtrl.stringForMinutes(val));
    } else {
      // Nouveau systeme : effectuer la selection des radio bouton pour la décision sur le mouvement
  		cetDecisionBascule = CET_DECISION_BASCULE_REFUSEE;
      if (uneTransactionSelectionnee.toAffectationAnnuelle().cetFactory().isEpargneCetDemandeDecisionIdentique()) {
      	cetDecisionBascule = CET_DECISION_BASCULE_IDENTIQUE;
      } else {
      	EOMouvement mouvementApresBascule = uneTransactionSelectionnee.toAffectationAnnuelle().toMouvementCetDecisionEpargne();
      	if (mouvementApresBascule != null && mouvementApresBascule.mouvementMinutes().intValue() > 0) {
      		cetDecisionBascule = CET_DECISION_BASCULE_DIFFERENTE;
      	}
      }
      heuresBasculees = uneTransactionSelectionnee.toAffectationAnnuelle().toMouvementCetDecisionEpargne().mouvementHeures();
    }
    return neFaitRien();
  }

  public boolean isUneTransactionSelectionnee() {
    return (uneTransactionSelectionnee != null);
  }

  public EOCETTransaction uneTransactionSelectionnee() {
    return uneTransactionSelectionnee;
  }

  public void setUneTransactionSelectionnee(EOCETTransaction newUneTransactionSelectionnee) {
    uneTransactionSelectionnee = newUneTransactionSelectionnee;
  }

  public String totalDebits() {
    int total = 0;

    if (lesTransactions() != null && lesTransactions().count() > 0) {
      total = ((Number) lesTransactions().valueForKeyPath("@sum.minutesDebitees")).intValue();
    }

    return TimeCtrl.stringForMinutes(total);
  }

  public String totalCredits() {
    int total = 0;

    if (lesTransactions() != null && lesTransactions().count() > 0) {
      total = ((Number) lesTransactions().valueForKeyPath("@sum.valeur")).intValue();
    }

    return TimeCtrl.stringForMinutes(total);
  }

  public String totalTransactions() {
    int total = 0;

    if (lesTransactions() != null && lesTransactions().count() > 0) {
      total = ((Number) lesTransactions().valueForKeyPath("@sum.valeur")).intValue()
      -((Number) lesTransactions().valueForKeyPath("@sum.minutesDebitees")).intValue();
    }

    return TimeCtrl.stringForMinutes(total);
  }

  /**
   * Ajouter une transaction sur l'ancien systeme
   * @return
   */
  public WOComponent ajouterAncienSysteme() {
    EOClassDescription uneTransactionCD = EOClassDescription.classDescriptionForEntityName(EOCETTransaction.ENTITY_NAME);
    uneTransactionSelectionnee = (EOCETTransaction) uneTransactionCD.createInstanceWithEditingContext(null, null);
    uneTransactionSelectionnee.setMinutesDebitees(new Integer(0));
    Number val = uneTransactionSelectionnee.valeur();
    if (val != null) {
      setValeur(TimeCtrl.stringForMinutes(val.intValue()));
    } else {
      setValeur(null);
    }
    return neFaitRien();
  }

  /**
   * Ajouter une transaction sur le nouveau systeme.
   * Il doit imperativement exister un mouvement de demande 
   * sur {@link #selectedAffAnn}, sans que la bascule soit
   * réalisée.
   * @return
   */
  public WOComponent ajouterNouveauSysteme() {
    EOClassDescription uneTransactionCD = EOClassDescription.classDescriptionForEntityName(EOCETTransaction.ENTITY_NAME);
    uneTransactionSelectionnee = (EOCETTransaction) uneTransactionCD.createInstanceWithEditingContext(null, null);
    uneTransactionSelectionnee.setMinutesDebitees(new Integer(0));
    uneTransactionSelectionnee.setToAffectationAnnuelleRelationship(selectedAffAnn);
    // on pre-accepte par défaut
    cetDecisionBascule = CET_DECISION_BASCULE_IDENTIQUE;
    return neFaitRien();
  }

  public WOComponent supprimerTransaction() throws Throwable {

  	

    // la suppression entraine la suppression de l'eventuel
    // mouvement de type blocage apres CET lié a l'affectation annuelle
  	if (uneTransactionSelectionnee.isTransactionAutomatique()) {
      EOMouvement mouvementASupprimer = uneTransactionSelectionnee.toAffectationAnnuelle().toMouvementCetDecisionEpargne();
      if (mouvementASupprimer != null) {
        edc.deleteObject(mouvementASupprimer);
      }
  	}
    
  	EOCET cet = uneTransactionSelectionnee.cet();
    boolean shouldDeleteCet = (cet.cETTransactions().count() == 1);
  	edc.deleteObject(uneTransactionSelectionnee);
  	
  	// si c'était la derniere transaction, on vire aussi le CET
    if (shouldDeleteCet) {
  		edc.deleteObject(cet);
  	} 
  	
    
    UtilDb.save(edc, true);
    
    lesTransactions = null;
    lesTransactions();
    
    uneTransactionSelectionnee = null;

    return neFaitRien();
  }

  
  
  /**
   * Enregistrement d'une transaction sur la base de l'ancien
   * systeme (sans attacher la demande)
   * @return
   * @throws Throwable
   */
  public WOComponent enregistrerAncienSysteme() throws Throwable {
  	
  	doPreEnregister();
  	
  	// traitement pour l'ancien systeme
    uneTransactionSelectionnee.setValeur(new Integer(TimeCtrl.getMinutes(valeur())));
    
  	doPostEnregister();
  	
  	return null;
  }
  
  /**
   * Enregistrement d'une transaction sur la base du nouveau
   * systeme (avec attachement de la demande)
   * @return
   * @throws Throwable
   */
  public WOComponent enregistrerNouveauSysteme() throws Throwable {
  	
  	boolean isUneNouvelleTransaction = doPreEnregister();
  	    
    // enregistrement de la decision
  	if (isUneNouvelleTransaction) {
  		// pour une nouvelle transaction
    	EOMouvement mouvement = EOMouvement.newMouvement(
    			selectedAffAnn, EOMouvement.TYPE_CET_DECISION_EPARGNE, 0);	
      if (cetDecisionBascule.equals(CET_DECISION_BASCULE_IDENTIQUE)) {
      	mouvement.setMouvementMinutes(selectedAffAnn.toMouvementCetDemandeEpargne().mouvementMinutes());	
      } else if (cetDecisionBascule.equals(CET_DECISION_BASCULE_DIFFERENTE) && !StringCtrl.isEmpty(heuresBasculees)) {
      	mouvement.setMouvementHeures(heuresBasculees);	
      }
      mouvement.setToAffectationAnnuelleRelationship(selectedAffAnn);
      uneTransactionSelectionnee.setToAffectationAnnuelleRelationship(selectedAffAnn);
  	} else {
  		// pour une transaction existante
  		EOMouvement mouvement = uneTransactionSelectionnee.toAffectationAnnuelle().toMouvementCetDecisionEpargne();
      if (cetDecisionBascule.equals(CET_DECISION_BASCULE_IDENTIQUE)) {
      	mouvement.setMouvementMinutes(uneTransactionSelectionnee.toAffectationAnnuelle().toMouvementCetDemandeEpargne().mouvementMinutes());	
      } else if (cetDecisionBascule.equals(CET_DECISION_BASCULE_DIFFERENTE) && !StringCtrl.isEmpty(heuresBasculees)) {
      	mouvement.setMouvementHeures(heuresBasculees);	
      } else {
      	mouvement.setMouvementMinutes(new Integer(0));
      }
  	}
  	
  	doPostEnregister();
  	
  	return null;
  }

  /**
   * Le préalable a tout enregistrement.
   * Le retour est <code>true</code> si c'est une nouvelle
   * transaction, <code>false</code> sinon.
   */
  private boolean doPreEnregister() throws Throwable {
    
  	boolean isUneNouvelleTransaction = isUneNouvelleTransaction();
  	
  	EOCET cet = uneTransactionSelectionnee.cet();
    
    // Traitement d'une nouvelle transaction
    if (isUneNouvelleTransaction) {
      if (lesTransactions == null || lesTransactions.count() == 0) {
        cet = (EOCET) EOUtilities.createAndInsertInstance(edc, EOCET.ENTITY_NAME);
        cet.setIndividuRelationship(selectedAffAnn.individu());
      } else {
        cet = ((EOCETTransaction) lesTransactions.lastObject()).cet();
      }
      edc.insertObject(uneTransactionSelectionnee);
      cet.addToCETTransactionsRelationship(uneTransactionSelectionnee);
//
//      // Remise a zero du reliquat de l'individu si il existe
//      NSArray affectations = null;
//      NSMutableDictionary bindings = new NSMutableDictionary();
//      bindings.setObjectForKey(selectedAffAnn.individu(), "individu");
//      bindings.setObjectForKey(leServiceSelectionne, 			"service");
//      bindings.setObjectForKey(laSession.debutAnnee(),		"dateDebut");
//      bindings.setObjectForKey(laSession.finAnnee(), 			"dateFin");
//
//      affectations = FinderAffectationAnnuelle.findAffectationsAnnuellesInContext(bindings, edc);
//      if (affectations != null && affectations.count() > 0) {
//        EOAffectationAnnuelle uneAffectationAnn = (EOAffectationAnnuelle) affectations.lastObject();
//        uneAffectationAnn.calculAffAnn("R").setMinutesReliquatNonConsommees(new Integer(0));
//      }
    
      // forcer le rafraichissement de la liste des transactions
      lesTransactions = null;
      lesTransactions();

    } else {
    	
    	// Modification d'une transaction existante
    	
    	
    }

    return isUneNouvelleTransaction;
    
  }

  
  /**
   * Les actions à réaliser après l'enregistrement
   * @throws Throwable
   */
  private void doPostEnregister() throws Throwable {
    // sauvegarde
    UtilDb.save(edc, true);
    
    // deselectionner la transaction
    uneTransactionSelectionnee = null;

		// on force le rechargement du planning s'il était en session
		laSession.clearCachePlanningForAffectationAnnuelle(selectedAffAnn);
  }
  
  public WOComponent annuler() {
    uneTransactionSelectionnee = null;
    setValeur(null);
    return neFaitRien();
  }

  public boolean isUneNouvelleTransaction() {
    return (edc.globalIDForObject(uneTransactionSelectionnee) == null);
  }

  public String onChange() {
    return "this.form.submit();";
  }

  public WOComponent selectionneIndividu() {
    lesTransactions = null;
    uneTransactionItem = null;
    uneTransactionSelectionnee = null;
    return neFaitRien();
  }

  public String valeur() {
    return valeur;
  }

  public void setValeur(String newValeur) {
    valeur = newValeur;
  }
  
  private String _nomPremiereAnneeUniv;
  
  /**
   * 
   */
  public String nomPremiereAnneeUniv() {
  	if (_nomPremiereAnneeUniv == null) {
    	NSArray dates = EOStructureAutorisee.findAllDebutAnneeUnivStringInContext(edc);
    	_nomPremiereAnneeUniv = (String) dates.objectAtIndex(0);
  	}
  	return _nomPremiereAnneeUniv;
  }
  

  
  /**
   * Debloquer la demande reliquat
   * TODO a modifier : ça vire tout !
   * @return
   */
  public WOComponent doDebloquerReliquat() {
  	
  	// suppression de toutes les demandes
  	selectedAffAnn.cetFactory().doSupprimeDemande();

  	// sauvegarde
		try {
			UtilDb.save(edc, true);
		} catch (Throwable e) {
			e.printStackTrace();
		}
  	
  	return null;
  }
  
  
  /**
   * Méthode temporaire à virer
   * @return
   */
  public WOComponent doAccepter() {
  	
  	selectedAffAnn.cetFactory().doAccepterIdentique();
  	
  	// sauvegarde
		try {
			UtilDb.save(edc, true);
		} catch (Throwable e) {
			e.printStackTrace();
		}
  	
  	return null;
  }
  
  // display
  
  /**
   * La classe CSS a appliquer aux demandes CET.
   * On reste en couleur neutre pour l'ancien systeme, et 
   * on met des couleurs pour le nouveau systeme selon
   * la décision.
   */
  public String trUneTransactionItemClass() {
  	String classCss = "listboxLine";
  	
  	if (uneTransactionItem.isTransactionAutomatique()) {
  		if (uneTransactionItem.toAffectationAnnuelle().cetFactory().isEpargneCetDemandeDecisionIdentique()) {
  			classCss = "trDemAcc";
  		} else {
  			if (uneTransactionItem.isEpargneReliquatRefusee()) {
       		classCss = "trDemRef";
      	} else {
       		classCss = "trDemVis";
      	}
  		}
  	}
  	
  	return classCss;
  }
  
  
  
  // editions
  

  /**
   * Imprimer l'etat de tous ce qui a ete saisi en CET
   * pour l'annee universitaire choisie.
   */
  public class PdfBoxComptesCETCtrl extends CngPdfBoxCtrl {

		public PdfBoxComptesCETCtrl(Class aGenericSixPrintClass, EOEditingContext anEc) {
			super(aGenericSixPrintClass, anEc);
		}

		public NSDictionary buildDico() {
	  	NSMutableDictionary dico = new NSMutableDictionary();
	  	// la liste des cet
	  	NSArray recs = EOCET.fetchAllCETs(edc);
	  	dico.setObjectForKey(recs, "recs");
	  	dico.setObjectForKey(DateCtrlConges.dateToString(
	  			DateCtrlConges.now()), "dateImpression");	
	    // URL du logo
	    dico.setObjectForKey(app.mainLogoUrl(), ConstsPrint.XML_KEY_MAIN_LOGO_URL);
			return dico;
		}
		
	  public String fileName() {
	  	return "ComptesCET";
	  }
  }
  
  /** */
  public PdfBoxComptesCETCtrl ctrlCompteCET() {
  	return new PdfBoxComptesCETCtrl(PrintListeCET.class, edc);
  }
  
  
  /**
   * Imprimer l'etat de tous ce qui a ete saisi en CET
   * pour l'annee universitaire choisie.
   */
  public class PdfBoxTransactionsCETCtrl extends CngPdfBoxCtrl {

		public PdfBoxTransactionsCETCtrl(Class aGenericSixPrintClass, EOEditingContext anEc) {
			super(aGenericSixPrintClass, anEc);
		}

		public NSDictionary buildDico() {
	  	NSMutableDictionary dico = new NSMutableDictionary();
	  	
	  	// la liste des transaction de cet pour cette annee
	  	NSTimestamp dDebut = DateCtrlConges.dateDebutAnneePourStrPeriodeAnnee(selectedAnneeUniv);
	  	NSTimestamp dFin = dDebut.timestampByAddingGregorianUnits(1, 0, -1, 0, 0, 0);
	  	NSArray recs = EOCETTransaction.findTransactionsForPeriodeInContext(edc, dDebut, dFin);
	  	dico.setObjectForKey(recs, "recs");
	  
	  	// le titre 
	  	dico.setObjectForKey("Liste des épargnes CET de "+selectedAnneeUniv, "titre");
	
	  	dico.setObjectForKey(DateCtrlConges.dateToString(
	  			DateCtrlConges.now()), "dateImpression");
			
	    // URL du logo
	    dico.setObjectForKey(app.mainLogoUrl(), ConstsPrint.XML_KEY_MAIN_LOGO_URL);
	    
	  	return dico;
		}
		
	  public String fileName() {
	  	return "TransactionsCET_"+StringCtrl.replace(selectedAnneeUniv,"/","_");
	  }
  }
  
  
  /** */
  public PdfBoxTransactionsCETCtrl ctrlTransactionsCET() {
  	return new PdfBoxTransactionsCETCtrl(PrintListeTransactionCET.class, edc);
  }
 
  /**
   * Imprimer l'etat de tous ce qui a ete saisi en CET
   * avant l'ouverture de l'application
   */
  public class PdfBoxTransactionsAntCETCtrl extends CngPdfBoxCtrl {

  	public PdfBoxTransactionsAntCETCtrl(Class aGenericSixPrintClass, EOEditingContext anEc) {
			super(aGenericSixPrintClass, anEc);
		}

  	public NSDictionary buildDico() {
	  	NSMutableDictionary dico = new NSMutableDictionary();
  		// la date de debut de l'appli
	  	NSArray dates = EOStructureAutorisee.findAllDebutAnneeUnivStringInContext(edc);
	  	NSTimestamp dDebut = DateCtrlConges.dateDebutAnneePourStrPeriodeAnnee((String) dates.objectAtIndex(0));
	  	NSArray recs = EOCETTransaction.findTransactionsForPeriodeInContext(edc, dDebut, null);
	  	dico.setObjectForKey(recs, "recs");
	  	
	  	// le titre 
	  	dico.setObjectForKey("Liste des épargnes CET antérieures à "+nomPremiereAnneeUniv(), "titre");
	  	
	  	dico.setObjectForKey(DateCtrlConges.dateToString(
	  			DateCtrlConges.now()), "dateImpression");		
	  	
	    // URL du logo
	  	dico.setObjectForKey(app.mainLogoUrl(), ConstsPrint.XML_KEY_MAIN_LOGO_URL);
	  	
	  	return dico;
  	}
			

  	public String fileName() {
  		return "TransactionsCETAnterieures";
  	}
 
  }
  
  /** */
  public PdfBoxTransactionsAntCETCtrl ctrlTransactionsAntCET() {
  	return new PdfBoxTransactionsAntCETCtrl(PrintListeTransactionCET.class, edc);
  }

  
  /**
   * Situation CET d'un agent 
   */
  public class PdfBoxSituationCETCtrl extends CngPdfBoxCtrl {

		public PdfBoxSituationCETCtrl(Class aGenericSixPrintClass, EOEditingContext anEc) {
			super(aGenericSixPrintClass, anEc);
		}

		public NSDictionary buildDico() {
	    NSMutableDictionary dico = new NSMutableDictionary();

	    dico.setObjectForKey(selectedAffAnn.individu().cCivilite(), "civilite");
	    dico.setObjectForKey(selectedAffAnn.individu().prenom(), "prenom");
	    dico.setObjectForKey(selectedAffAnn.individu().nom(), "nom");
	    
	    // grade
	    dico.setObjectForKey(
	    		selectedAffAnn.individu().getLibelleGradeForIndividu(
	            DateCtrlConges.now(),
	            DateCtrlConges.now()
	        ),
	        "grade"
	    );
	    
	    dico.setObjectForKey(DateCtrlConges.dateToString(dateArret), "dateArret");
	    dico.setObjectForKey(lesTransactions(), "listeTransaction");

	    // URL du logo
	    dico.setObjectForKey(app.mainLogoUrl(), ConstsPrint.XML_KEY_MAIN_LOGO_URL);

	    return dico;
		}
		
	  public String fileName() {
	  	return "SituationCET_"+
	  	StringCtrl.toBasicString(selectedAffAnn.individu().nom())+"_"+
	  	StringCtrl.toBasicString(selectedAffAnn.individu().prenom());
	  }
  }
  
  /** */
  public PdfBoxSituationCETCtrl ctrlSituationCET() {
  	return new PdfBoxSituationCETCtrl(PrintSituationCET.class, edc);
  }


}
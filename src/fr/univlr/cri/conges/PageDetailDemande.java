package fr.univlr.cri.conges;
// Generated by the WOLips Core at Mon Aug 16 08:31:08 CEST 2004

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

import fr.univlr.cri.conges.ParentPlannings;
import fr.univlr.cri.conges.eos.modele.conges.EOAlerte;
import fr.univlr.cri.conges.eos.modele.planning.EOAffectationAnnuelle;
import fr.univlr.cri.conges.eos.modele.planning.EOHoraire;
import fr.univlr.cri.conges.objects.*;
import fr.univlr.cri.ycrifwk.utils.UtilDb;

public class PageDetailDemande extends ParentPlannings {

	public Planning lePlanningLocal;
	public EOAlerte laDemande;
  public boolean isPourViser = false;
  public NSMutableArray lesAffectationsDuServiceRestantes, lesAffectations;
  public EOAffectationAnnuelle lesAffectationsDuServiceRestantesItem, lesAffectationsDuServiceRestantesSelection, lAffectation;
  public NSArray lesHoraires;
  public EOHoraire unHoraire;
  public NSArray lesPlannings;
  public boolean isVisuHoraire;

  public PageDetailDemande(WOContext context) {
    super(context);
  }
  
  public void reset() {
    lePlanningLocal = laSession.getLePlanningSelectionne();
    lesPlannings = new NSArray(lePlanningLocal);
    laDemande = null;

    NSMutableDictionary bindings = new NSMutableDictionary();
    bindings.setObjectForKey(laSession.getLePlanningSelectionne().affectationAnnuelle().structure(), "service");
    bindings.setObjectForKey(laSession.getLePlanningSelectionne().affectationAnnuelle().dateDebutAnnee(), "dateDebut");

    lesAffectationsDuServiceRestantes = new NSMutableArray(
        EOAffectationAnnuelle.findAffectationsAnnuellesInContext(bindings, laSession.ec()));
    
    // on filtre les affectation selon les droits de l'individu sur le service
    lesAffectationsDuServiceRestantes = new NSMutableArray(
    		EOAffectationAnnuelle.filteredAffectationsForResponsabilite(
    				lesAffectationsDuServiceRestantes, laSession.structuresDispoParNiveauSelection()));  
    
    // classement alpha
    lesAffectationsDuServiceRestantes = new NSMutableArray(
        EOSortOrdering.sortedArrayUsingKeyOrderArray(lesAffectationsDuServiceRestantes.immutableClone(),
        EOAffectationAnnuelle.SORT_INDIVIDU));

    lAffectation = lePlanningLocal.affectationAnnuelle();
    lesAffectations = new NSMutableArray(lAffectation); // planning de l'individu
    lesAffectationsDuServiceRestantes.removeIdenticalObject(lAffectation);
    lesAffectationsDuServiceRestantesItem = null;
    lesAffectationsDuServiceRestantesSelection = null;
    lesHoraires = null;
  }

  public WOComponent accepterLaDemande() throws Throwable {
    WOComponent nextPage = laSession.getSavedPageWithName(PageDemandes.class.getName());

    laDemande.setFlagReponse("1");
    UtilDb.save(edc, true);

    return nextPage;
  }

  public WOComponent refuserLaDemande() throws Throwable {
    WOComponent nextPage = laSession.getSavedPageWithName(PageDemandes.class.getName());

    laDemande.setFlagReponse("0");
    UtilDb.save(edc, true);

    return nextPage;
  }

  public WOComponent suspendreLaDemande() throws Throwable {
    WOComponent nextPage = laSession.getSavedPageWithName(PageDemandes.class.getName());

    laDemande.setFlagReponse(null);
    UtilDb.save(edc, true);

    return nextPage;
  }

  public EOAlerte laDemande() {
    return laDemande;
  }

  public void setLaDemande(EOAlerte alerte) {
    laDemande = alerte;
    isVisuHoraire = true;
    if (laDemande().isValidationPrev()) {
      // validation de previsionnel
      lePlanningLocal.setType("P");
    } else {
      lePlanningLocal.setType("R");
      if (laDemande().isModificationReel()) {
        // modification de planning reel
        lesAffectations.addObject(lAffectation);
      } else {
        // validation de conges reel
        isVisuHoraire = false;
        // on va mettre en valeur les jours du conges
        // TODO, faire un addStatut au lieu de setStatut, quand
        // j'aurais trouve comment superposer les div et les tables ...
        NSArray jours = lePlanningLocal.lesJours(
            alerte.occupation().dateDebut(), alerte.occupation().dateFin());
        if (jours.count() == 1)
          ((Jour) jours.lastObject()).setStatut(Jour.HIGHLIGHT_OCC_ONLY_DAY);
        else {
          for (int i = 0; i < jours.count(); i++) {
            Jour jour = (Jour) jours.objectAtIndex(i);
            if (i == 0)
              jour.setStatut(Jour.HIGHLIGHT_OCC_FIRST_DAY);
            else if (i == jours.count()-1)
              jour.setStatut(Jour.HIGHLIGHT_OCC_LAST_DAY);
            else
              jour.setStatut(Jour.HIGHLIGHT_OCC_MIDDLE_DAY);            
          }
        }
      }
    }
  }


  public boolean isPourViser() {
    return isPourViser;
  }

  public void setIsPourViser(boolean value) {
    isPourViser = value;
  }

  /**
   * Action de choisir un planning dans la liste deroulante
   * ou de selection d'un planning deja les onglets
   */
  public WOComponent selectAffectation() {
    if (lesAffectationsDuServiceRestantesSelection != null && 
        !lesAffectations.containsObject(lesAffectationsDuServiceRestantesSelection)) {
      // choix d'un individu dans la liste deroulante
      lesAffectations.addObject(lesAffectationsDuServiceRestantesSelection);
      lePlanningLocal = Planning.newPlanning(lesAffectationsDuServiceRestantesSelection, laSession.cngUserInfo(), laSession.dateRef());
      if (laDemande().isValidationPrev())
        lePlanningLocal.setType("P");
      else
        lePlanningLocal.setType("R");
      lesPlannings = lesPlannings.arrayByAddingObject(lePlanningLocal);
      lesAffectationsDuServiceRestantes.removeIdenticalObject(lesAffectationsDuServiceRestantesSelection);
      lAffectation = lesAffectationsDuServiceRestantesSelection;
      lesAffectationsDuServiceRestantesSelection = null;
    } else {
      // selection d'un planning dans les onglets
      EOQualifier qual = EOQualifier.qualifierWithQualifierFormat("affectationAnnuelle=%@", new NSArray(lAffectation));
      lePlanningLocal = (Planning) EOQualifier.filteredArrayWithQualifier(lesPlannings, qual).lastObject();
      // force son etat selon le type de demande (le second est le planning "differenciel"
      lePlanningLocal.setType("R");
      if (laDemande().isModificationReel() && indexMenuItem == 1)
          lePlanningLocal.setType("S");
      else if (laDemande().isValidationPrev())
        lePlanningLocal.setType("P");
    }
    return null;
  }


  public NSArray lesHoraires() {
    lesHoraires = lePlanningLocal.affectationAnnuelle().horaires();
    return lesHoraires;
  }

  /**
   * Affichage du nom de l'agent, complete
   * par "nouveau" / "ancien" pour le cas
   * d'un changement de planning. 
   */
  public String libelleOnglet() {
    String libelle = lAffectation.individu().nomComplet();
    if (laDemande().isModificationReel()) {
      if (indexMenuItem == 0)
        libelle += " (Nouveau)";
      else if (indexMenuItem == 1)
        libelle += " (Precedent)";
    }
    return libelle;
  }
  
  // GESTION DU MENU
  
  public int indexMenuItem;

  /**
   * Est on sur le planning precedent
   */
  private boolean isPlanningBackup() {
    return laDemande().isModificationReel() && indexMenuItem == 1;
  }
  
  /**
   * Est on sur le planning modifie
   */
  private boolean isPlanningNouveau() {
    return laDemande().isModificationReel()  && indexMenuItem == 0;
  }
  

  public String classTabMenu() {
    String classTabMenu = "tab";
    if (lAffectation.equals(lePlanningLocal.affectationAnnuelle())) {
      if (indexMenuItem == 0 || indexMenuItem == 1) {
        if (lePlanningLocal.isPReel() && isPlanningNouveau())
          classTabMenu = "selectedTab";
        else if (lePlanningLocal.isPBack() && isPlanningBackup())
          classTabMenu = "selectedTab";
      } else
        classTabMenu = "selectedTab";
    }
    return classTabMenu;
  }

	public Planning planningBinding() {
		return lePlanningLocal;
	}  
  
}
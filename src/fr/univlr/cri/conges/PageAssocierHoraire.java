package fr.univlr.cri.conges;

// Generated by the WOLips Core at Thu Jun 24 07:39:19 CEST 2004

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import fr.univlr.cri.conges.PagePlannings;
import fr.univlr.cri.conges.Session;
import fr.univlr.cri.conges.YCRIWebPage;
import fr.univlr.cri.conges.eos.modele.planning.EOHoraire;
import fr.univlr.cri.conges.objects.*;
import fr.univlr.cri.util.StringCtrl;
import fr.univlr.cri.ycrifwk.utils.UtilDb;

/**
 * Ecran d'association des _horaires hebdomadaires aux semaines
 * du planning.
 * 
 * @author ctarade
 */
public class PageAssocierHoraire extends YCRIWebPage {

	// variable entrante
	public Planning lePlanning;

	public Semaine laPremiereSemaine;
	public EOHoraire unHoraire;
	public EOHoraire horaireSelectionne;
	public boolean isAffectationRealisee;
	public boolean isValide;
	public String message;
	private NSArray _horaires;

	// semaines selectionnées dans le composant CalendrierSemaineACocher
	public NSMutableArray arraySemainesSelectionnees;
	
	public PageAssocierHoraire(WOContext context) {
		super(context);
	}

	public void reset() {
		super.reset();
		laPremiereSemaine = null;
		horaireSelectionne = null;
		_horaires = null;
		isAffectationRealisee = false;
		isValide = false;
		message = null;
		arraySemainesSelectionnees = new NSMutableArray();
	}

	public void externeSetLePlanning(Planning value) {
		lePlanning = value;
	}

	/**
	 * 
	 */
	public void initialise() {
		if (horaires().count() == 1) {
			// si 1 unique horaire on le selectionne
			horaireSelectionne = (EOHoraire) horaires().lastObject();
		} else if (horaires().count() > 1) {
			// si plus d'un horaire, on regarde la semaine selectionnée
			// et on prend le premier horaire de quotité identique 
			NSMutableArray horairesAssociablesAPremiereSemaine = new NSMutableArray();
			for (int i=0; i<horaires().count(); i++) {
				EOHoraire horaire = (EOHoraire) horaires().objectAtIndex(i);
				if (horaire.isAssociableALaSemaine(laPremiereSemaine())) {
					horairesAssociablesAPremiereSemaine.addObject(horaire);
				}
			}
			//
			if (horairesAssociablesAPremiereSemaine.count() > 0) {
				horaireSelectionne = (EOHoraire) horairesAssociablesAPremiereSemaine.objectAtIndex(0);
			}
		}

		// preselectionner la semaine cliquée si elle est associable à l'horaire selectionné
		if (horaireSelectionne != null && 
				laPremiereSemaine() != null &&
				horaireSelectionne.isAssociableALaSemaine(laPremiereSemaine())) {
			arraySemainesSelectionnees.addObject(laPremiereSemaine());
		}
	}
	
	public NSArray horaires() {
		if (_horaires == null) {
			_horaires = lePlanning.affectationAnnuelle().horaires();
		}
		return _horaires;
	}


	public void setLaPremiereSemaine(Semaine uneSemaine) {
		laPremiereSemaine = uneSemaine;
	}

	public Semaine laPremiereSemaine() {
		return laPremiereSemaine;
	}

	public WOComponent validerSaisiePlanning() throws Throwable {
		PageTransactionOK nextPage = null;
		String messageErreur = null;

		if (horaireSelectionne != null) {
			/*messageErreur = lePlanning.affecteHorairePourSemainesEntre(
					horaireSelectionne, laPremiereSemaine(), laSemaineFinale);*/
			messageErreur = lePlanning.affecteHorairePourSemaines(
					horaireSelectionne, arraySemainesSelectionnees);
		} else {
			messageErreur = "Vous devez choisir un horaire &agrave; associer";
		}
		if (StringCtrl.isEmpty(messageErreur)) {
			setIsAffectationRealisee(true);
		} else {
			setIsAffectationRealisee(false);
		}
    UtilDb.save(laSession.ec(), true);

		if (isAffectationRealisee()) {
			nextPage = (PageTransactionOK) laSession.getSavedPageWithName(PageTransactionOK.class.getName());
			nextPage.setRecOccupationAImprimer(null);
			setMessage("Association realisee avec succes.");
		} else {
			// TODO Modifier par parametre appli
			// laSession.ec().revert();
			setMessage(messageErreur);
		}
		return nextPage;
	}

	public WOComponent revenirAuPlanning() {
		Session laSession = (Session) session();
		PagePlannings nextPage = (PagePlannings) laSession.getSavedPageWithName(PagePlannings.class.getName());
		setIsValide(false);
		return nextPage;
	}

	public PagePlannings annuler() {
		Session laSession = (Session) session();
		PagePlannings nextPage = (PagePlannings) laSession.getSavedPageWithName(PagePlannings.class.getName());
		return nextPage;
	}
	
	/**
	 * @return
	 */
	public boolean isAffectationRealisee() {
		return isAffectationRealisee;
	}

	/**
	 * @return
	 */
	public boolean isValide() {
		return isValide;
	}

	/**
	 * @return
	 */
	public String message() {
		if (message == null)
			message = "";
		return message;
	}

	/**
	 * @param b
	 */
	public void setIsAffectationRealisee(boolean b) {
		isAffectationRealisee = b;
	}

	/**
	 * @param b
	 */
	public void setIsValide(boolean b) {
		isValide = b;
	}

	/**
	 * @param string
	 */
	public void setMessage(String string) {
		message = string;
	}

	public boolean isUnHoraireSelectionne() {
		boolean isUnHoraireSelectionne = false;

		if (horaireSelectionne != null)
			isUnHoraireSelectionne = true;

		return isUnHoraireSelectionne;
	}
	
	/**
	 * Semaines disponibles pour le composant {@link CalendrierSemaineACocher}
	 * @return
	 */
	public NSMutableArray arraySemaineDisponibles() {
		NSMutableArray arraySemaineDisponibles = new NSMutableArray();
			
		NSArray semaines = lePlanning.semainesActives();
		for (int i=0; i<semaines.count(); i++) {
			Semaine semaine = (Semaine) semaines.objectAtIndex(i);
			if (lePlanning.isSemaineModifiable(semaine, cngUserInfo())) {
				arraySemaineDisponibles.addObject(semaine);
			}
		}

		return arraySemaineDisponibles;
	}

}
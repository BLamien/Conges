package fr.univlr.cri.conges;
// Generated by the WOLips TemplateEngine Plug-in at 6 mars 2006 17:03:13

/**
 * Composant graphique representant 1 jour sur le planning
 * 
 * @author Cyril TARADE <cyril.tarade at univ-lr.fr>
 */

import com.webobjects.appserver.*;

import fr.univlr.cri.conges.ParentPlannings;
import fr.univlr.cri.conges.YCRIWebPage;
import fr.univlr.cri.conges.eos.modele.planning.I_ClasseMetierNotificationParametre;
import fr.univlr.cri.conges.objects.Jour;
import fr.univlr.cri.conges.objects.Parametre;
import fr.univlr.cri.conges.objects.Planning;
import fr.univlr.cri.conges.objects.Semaine;

public class JourPlanning 
	extends YCRIWebPage
		implements I_ClasseMetierNotificationParametre {

  // bindings
  public Semaine laSemaine;
  public Jour leJour;
  public boolean isVisuOccupation;
  public boolean isDisabled;
  public boolean isSemainePasModifiable;
  public Planning lePlanning;
  
  public Plannings parentPage;
  
  
  // parametres globaux
  private static boolean isAutoriserSaisieAbsenceSurPlanningPrevisionnel;
  private static boolean isAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee;
  
  
  public JourPlanning(WOContext context) {
    super(context);
    parentPage = ((ParentPlannings) context.page()).getPlanningsComponent();
  }
  
  /**
   * @deprecated
   * @see #initStaticField(Parametre)
   */
  public static void initStaticFields(
			boolean anIsAutoriserSaisieAbsenceSurPlanningPrevisionnel,
			boolean anIsAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee) {
		isAutoriserSaisieAbsenceSurPlanningPrevisionnel = anIsAutoriserSaisieAbsenceSurPlanningPrevisionnel;
		isAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee = anIsAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee;
	}
  
  /**
	 * @see I_ClasseMetierNotificationParametre
	 */
	public static void initStaticField(
			Parametre parametre) {
		if (parametre == Parametre.PARAM_AUTORISER_SAISIE_ABSENCE_SUR_PLANNING_PREVISIONNEL) {
			isAutoriserSaisieAbsenceSurPlanningPrevisionnel = parametre.getParamValueBoolean().booleanValue();
		} else if (parametre == Parametre.PARAM_AUTORISER_SAISIE_ABSENCE_SUR_PLANNING_PREVISIONNEL) {
			isAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee = parametre.getParamValueBoolean().booleanValue();
		}
	}
	
  
  /**
   * affichage de d�tail de l'horaire dans le popup
   */
  public String htmlTextHoraire() {
    String htmlTextHoraire = "";
    if (laSemaine.horaire() != null) {
      htmlTextHoraire = laSemaine.horaire().toStringHtml();
    }
    return htmlTextHoraire;
  }  
        
  public String classeNomJour() {
    String classeNomJour = null;
    if (leJour.isFerie() || leJour.isChome())
      classeNomJour = "tdNomJourChome";
    else
      classeNomJour = "tdNomJour";
    return classeNomJour;
  }
    
  /**
   * gestion du click sur un jour du calendrier;
   * - pas d'absence : saisie d'occupation
   * - absence : modif occupation
   */
  public WOComponent clickJourSemaine() {
    if (isJourOccupeConge())
      return parentPage.detaillerUneAbsence();
    else
      return parentPage.saisirOccupation();   
  }
   
  /**
   * Est-ce que le jour contient une occupation
   * @return
   */
  private boolean isJourOccupeConge() {
    return leJour!=null && 
    (leJour.isCongeJourneeComplete() || leJour.isCongeAM() || leJour.isCongePM() ||
        leJour.isCongeLegalJourneeComplete() || leJour.isCongeLegalAM() || leJour.isCongeLegalPM() ||
        leJour.isFerme());
  }
    
  /**
   * Code javascript d'ouverture de la popup pour la saisie ou 
   * le detail d'une occupation
   */
  public String onClickJavascriptNoJour() {
    if (isJourOccupeConge())
      return "ouvrirPopup(this.href, 400);";
    else
      return "ouvrirPopup(this.href, 300);";
  }
  
  /**
   * La hauteur de la popup a ouvrir
   * lors du clic sur le numero du jour
   */
  public int heightPopup() {
  	int height = 300;
 
  	if (isJourOccupeConge()) {
  		height = 400;
  	}

  	return height;
  }
    
  /**
   * Le titre du lien lors du survol d'un 
   * numero de jour
   */
  public String tipNoJour() {
    if (isJourOccupeConge()) 
      return "Détailler cette occupation";
    else 
      return "Saisir une nouvelle occupation";
  }
    
  /**
   * Possibilite de cliquer sur le numero
   * du jour pour saisie d'occupation ou
   * detail d'occupation
   */
  private boolean isJourOuvertALaSaisie() {
    boolean isJourOuvertALaSaisie = false;
    
    if (!isDisabled) {
    	
      if (lePlanning.isPReel()) {
        if (lePlanning.isValide() && 
            cngUserInfo().isAllowedModifyPlanning(lePlanning.affectationAnnuelle())) {
          isJourOuvertALaSaisie = leJour.isOuvertALaSaisie();
        }
        
      } else if (lePlanning.isPTest()) {
        if (cngUserInfo().isAllowedModifyPlanning(lePlanning.affectationAnnuelle())) {
          isJourOuvertALaSaisie = leJour.isOuvertALaSaisie();
        }      
        
      } else if (lePlanning.isPPrev()) {
      	if (isAutoriserSaisieAbsenceSurPlanningPrevisionnel &&
      			(	
      					isAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee ||
      					!isAutoriserSaisieAbsenceSurPlanningPrevisionnelEnCoursDAnnee && lePlanning.isPlanningReelContientHoraires()) &&
      			lePlanning.isNonValide() && 
            lePlanning.semainesLibres().count()==0 &&
            lePlanning.affectationAnnuelle().horaires().count()>0 &&
            cngUserInfo().isAllowedModifyPlanning(lePlanning.affectationAnnuelle()) && 
            laSemaine.isActive()) {
          isJourOuvertALaSaisie = leJour.isOuvertALaSaisie();
        }
      }  
      
    }
    
    return isJourOuvertALaSaisie;     
  }
  
  public boolean isDisabledClicJour() {
    return !isJourOuvertALaSaisie();
  }

  /**
   * La css correspondant a la div representant les vacances
   */
  public String cssIdVac() {
    if (leJour.isVacancesScolaires())
      return "vac";
    else
      return "nvac";
  }
  
  /**
   * Au chargement de la page, on fixe a l'avance la classe
   * de chaque jour selon les filtres, pour eviter 
   * l'execution du code JS des CSS un peu rameux ...
   */
   public String classeJour() {
    if (isVisuOccupation)
      return leJour.classeCssOccupation();
    else
      return leJour.classeCssNoOccupation();
   }

   
   /**
   * Est-ce que le jour en cours doit etre complete
   * par une autre div pour mise en valeur 
   */
  public boolean showTransparentDiv() {
    return leJour.classeCssDivJour() != null;
  }
  
  /**
   * La balise d'ouverture pour la transparence. On n'utilise
   * pas de WOGenericContainer pour ne pas surcharger la page
   */
  public String transparentOpenDiv() {
    return "<div id=\"" + leJour.classeCssDivJour() +"\">";
  }

  /**
   * La balise de fermeture pour la transparence. On n'ecrit pas
   * </div> directement pour que WOBuilder n'affiche pas d'erreur
   * de syntaxe.
   */
  public String transparentCloseDiv() {
    return "</div>";
  }
    /**
     * gestion de l'affichage du '!' si aucun horaire n'est associe a la semaine
     * il est affiche si :
     * - dans une meme semaine, le jour precedent porte le numero de semaine (que j-1 != dimanche)
     * - sinon, dans une meme semaine, si le jour suivant porte le numero de semaine et que le jour suivant du suivant n'est pas dispo
     */
    public boolean isHoraireNonAssocie() {
      return leJour.semaine().horaire() == null;
    }

}